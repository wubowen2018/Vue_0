<?xml version="1.0" encoding="UTF-8"?>
<!--
application.yml配置

logging:
    # 指定配置文件 可以是logback.xml 或者是 logback-spring.xml
    # 带spring后缀的配置文件可以使用spring的profile
    config: classpath:logback-spring.xml

    # 按照包 指定日志的级别，默认是info 是root级，没有指定的用root级配置
    # 使用mybatis时候 打印sql语句
    level:
        # dao 包下日志输出是debug
        dao: debug
        org:
            mybatis: debug

    # file.name 和 file.path 是相互冲突的配置，两个都配置，生效的是file.name
    file:
        path: home/logs/
        name: ${logging.file.path}springboot

    # 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出
-->


<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。

    scanPeriod：设置监测配置文件是否有修改的时间间隔，
                如果没有给出时间单位，默认单位是毫秒，
                当scan为true时，此属性生效。默认的时间间隔为1分钟。

    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为 false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="true">
    <!--
        可以使用 <include> 标签在一个配置文件中包含另外一个配置文件
        下面引入了springboot 默认日志的logback的基础配置， 这里注释了
    -->
    <!--<include resource="org/springframework/boot/logging/logback/base.xml" />-->

    <!--控制台日志使用默认的格式 -->
    <!--<include resource="org/springframework/boot/logging/logback/defaults.xml" />-->


    <!-- 引入配置源，下面可以引用 -->
    <property resource="application.properties" />
    <!--
        每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改
     -->
    <!--  <contextName>${spring.application.name}</contextName>-->


    <!--
        property 标签 用来定义变量
        name的值是变量的名称，value的值是变量定义的值。
        通过定义的变量会被插入到logger上下文中，可以使"${var}"来使用。
    -->
    <!--
        定义日志的根目录
        第一种： 写死路径，通用性低，已注释
        第二种： 引用application.yml里的配置，通用性高
    -->
    <!--<property name="LOG_HOME" value="/var/logs/springboot/logback/>-->
    <property name="LOG_HOME" value="${logging.file.path}" />


    <!-- 未解 -->
    <!--<property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}/}spring.log}"/>-->


    <!-- 定义日志文件名称 -->
    <property name="LOG_NAME" value="${spring.application.name}-springboot"></property>


    <!--  定义文件大小  -->
    <property name="maxFileSize" value="100MB" />
    <!--  定义保存时间 默认是天  -->
    <property name="maxHistory" value="15" />


    <!--0. 日志格式和颜色渲染 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />


    <!-- 彩色日志格式 -->
    <!-- %d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度，%logger{50} 表示logger名字最长50个字符，否则按照句点分割。%msg：日志消息，%n是换行符 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr([%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS z}}]){faint} %clr(${LOG_LEVEL_PATTERN:-- %5p}){green} %clr([%10.10t]){faint} %clr(${PID:- }){magenta} %clr(---){faint} %clr(%logger){cyan} %clr(:){faint} %5L  %msg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>


    <!--1. 输出到控制台--><!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>


        <!--
            下面两块是定义控制台打印格式的
            其中第二种可以使用spring的profile，指定环境，开发，测试或者生产
        -->
        <!--
            <encoder>
                <pattern>${CONSOLE_LOG_PATTERN}</pattern>
                <charset>UTF-8</charset>
            </encoder>
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <springProfile name="dev">
                <pattern>DEV-${CONSOLE_LOG_PATTERN}</pattern>
            </springProfile>
            <springProfile name="!dev">
                <pattern>PROD-${CONSOLE_LOG_PATTERN}</pattern>
            </springProfile>
        </layout>
    </appender>


    <!-- 2.1 level为 DEBUG 日志，时间滚动输出  -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_HOME}/${LOG_NAME}-debug.log</file>

        <!--日志文档输出格式-->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>

        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${LOG_HOME}/${spring.application.name}-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 日志文件大小，超过之后存档 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>

        <!-- 此日志文档只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!--如果是 true，日志会被安全的写入文件，即其他的FileAppender也在向此文件做写入操作。效率低，默认是 false-->
        <prudent>false</prudent>
    </appender>


    <!-- 2.2 level为 INFO 日志，时间滚动输出  -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_HOME}/${LOG_NAME}-info.log</file>

        <!--日志文档输出格式-->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${LOG_HOME}/${spring.application.name}-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  单个日志文件大小限制，超过的单独存储  -->
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

            <!--日志文档保留天数-->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>

        <!-- 此日志文档只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false -->
        <prudent>false</prudent>
    </appender>


    <!-- 2.3 level为 WARN 日志，时间滚动输出  -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_HOME}/${LOG_NAME}-warn.log</file>

        <!--日志文档输出格式-->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  存档格式  -->
            <fileNamePattern>${LOG_HOME}/${spring.application.name}-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  单个日志文件大小限制，超过的单独存储  -->
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

            <!--日志文档保留天数-->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>

        <!-- 此日志文档只记录warn级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false -->
        <prudent>false</prudent>
    </appender>


    <!-- 2.4 level为 ERROR 日志，时间滚动输出  -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_HOME}/${LOG_NAME}-error.log</file>

        <!--日志文档输出格式-->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>

        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  存档格式  -->
            <fileNamePattern>${LOG_HOME}/${spring.application.name}-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  单个日志文件大小限制，超过的单独存储  -->
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

            <!--日志文档保留天数-->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>

        <!-- 此日志文档只记录ERROR级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false -->
        <prudent>false</prudent>
    </appender>


    <!--文件输出的格式设置 -->
    <appender name="ALL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_HOME}/${LOG_NAME}-all.log</file>

        <!-- 文件输出的日志的格式 -->
        <encoder>
            <!-- [%date{yyyy-MM-dd HH:mm:ss z}] [ %-5level] %logger{96} [%line] - %msg%n -->
            <pattern>%clr([%d{yyyy-MM-dd HH:mm:ss.SSS z}]){faint} %clr(-- %5p){green} %clr([%10.10t]){faint} %clr(${PID:- }){magenta} %clr(---){faint} %clr(%logger){cyan} %clr(:){faint} %5L  %msg%n%wEx</pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!-- 配置日志所生成的目录以及生成文件名的规则 在logs/mylog-2017-06-31.0.log.zip -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${spring.application.name}-info-%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>

            <!-- 如果按天来回滚，则最大保存时间为15天，15天之前的都将被清理掉 -->
            <maxHistory>15</maxHistory>

            <!-- 日志总保存量为10GB -->
            <totalSizeCap>10GB</totalSizeCap>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--文件达到 最大128MB时会被压缩和切割 -->
                <maxFileSize>128 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 只是DEBUG级别以上的日志才显示 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>

        <!-- 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false -->
        <prudent>false</prudent>
    </appender>


    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${LOG_NAME}.log</file>

        <!--
            当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动%i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${LOG_NAME}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>

            <!--
                可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，且maxHistory是365，则只保存最近365天的文件，
                删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。
            -->
            <maxHistory>${maxHistory}</maxHistory>

            <!--
                当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
                注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </layout>
    </appender>


    <!--
        为springboot集成的框架设置不同的级别：
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
    -->
    <logger name="org.springframework.web" level="INFO"/>
    <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>
    <logger name="org.springframework" level="DEBUG" additivity="false"></logger>
    <logger name="noModule" level="INFO"/>
    <logger name="org.codehaus" level="INFO"/>
    <logger name="org.apache" level="INFO"/>
    <logger name="druid.sql" level="INFO"/>
    <logger name="com.alibaba" level="DEBUG">
        <appender-ref ref="STDOUT"/>
    </logger>
    <logger name="com.springboot" level="DEBUG"/>


    <!-- 3. 最终的策略 -->
    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->

    <!-- 3.1 开发环境:打印控制台-->
    <!-- <springProfile name="dev">
        <logger name="com.sdcm.pmp" level="debug"/>
    </springProfile> -->

    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <!--<appender-ref ref="DEBUG_FILE" />-->
        <appender-ref ref="INFO_FILE" />
         <!--<appender-ref ref="ALL_FILE" />-->
        <!--<appender-ref ref="WARN_FILE" />-->
        <!--<appender-ref ref="ERROR_FILE" />-->
        <!--<appender-ref ref="appLogAppender" />-->
    </root>

    <!-- 3.2 生产环境:输出到文档
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="DEBUG_FILE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="ERROR_FILE" />
            <appender-ref ref="WARN_FILE" />
            <appender-ref ref="appLogAppender" />
        </root>
    </springProfile> -->

</configuration>